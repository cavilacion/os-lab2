%{
#include "shell.h"

char *word_buff; /* global buffer (very sorry) */

%}

letter   	[a-zA-Z]
digit    	[0-9]
symbol   	{letter}|{digit}|[!@#\$\%\.\-\_\?\\]


%%


"<"				{ return IN; }
">"				{ return OUT; }
"|"				{ return PIPE; }
"&"				{ return BACKGROUND; }
"\n"			{ return NEWLINE; }

{symbol}+ { word_buff = strdup (yytext); return WORD; }

"\""({symbol}|" ")+"\"" { /* word surrounded by quotes */
										word_buff = malloc ( strlen(yytext) - 1 );
										int i; for (i=1; i<strlen(yytext)-1; ++i) word_buff[i-1]=yytext[i];
										word_buff[i-1]='\0';
										return WORD;
}

" "				{ /* ignore white spaces */ }
.					{ return INVALID; }


%%

int main (int argc, char *argv[]) {
	printf ("Welcome to minishell! Type exit to quit.\n\n");
	
	/* initialization of proctable and command */
	
	int status;
	
	procTable *pt=safeMalloc (sizeof(procTable));
	if (pt==NULL) return -1;
	command *cmd=safeMalloc (sizeof(command));
	if (pt==NULL) {
		free (pt);
		return -1;
	}
	
	status = initProcTable (pt);
	if (status == -1) {
		free (pt);
		free (cmd);
		return -1;
	}
	status = initCommand (cmd);
	if (status == -1) {
		destroyProcTable (pt);
		free (pt);
		free (cmd);
		return -1;
	}
	
	/* run shell */
	do { 
		type_prompt(); 
		status = parseInput (cmd, pt);
		if (status == -1) {
			cleanup (cmd, pt);
			free (pt);
			free (cmd);
			return -1;
		}
		else if (status == 0) {
			printf ("there is a parse error in your command\n");
			while (yylex()!=NEWLINE) { }
		}
		else {
			status = executeCmd (cmd, pt);
		}
		destroyCommand (cmd);
		status = initCommand (cmd);
		if (status == -1) {
			cleanup (cmd, pt);
			free (pt);
			free (cmd);
			return -1;
		}		
	} while (1); 
	
	return 0;
}

